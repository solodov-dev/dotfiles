return {
  {
    "folke/which-key.nvim",
    event = "VeryLazy",
    config = function()
      local wk = require("which-key")
      return wk.add({
        { "<leader>a",            group = "Actions" },
        { "<leader>as",           "<cmd>s<cr>",                                 desc = "ISwap" },
        { "<leader>s",            group = "Search" },
        { "<leader>sf",           "<cmd>Telescope find_files<cr>",              desc = "Find Files (all)" },
        { "<leader>sr",           "<cmd>GrugFar<cr>",                           desc = "Replace" },
        { "<leader>sR",           "<cmd>Telescope resume<cr>",                  desc = "Resume previous search" },
        { "<leader>st",           "<cmd>Telescope lsp_type_definitions<cr>",    desc = "Type definitions" },
        { "<leader>si",           "<cmd>Telescope lsp_implementations<cr>",     desc = "Implementations" },
        { "<leader>sg",           "<cmd>Telescope git_files<cr>",               desc = "Git Files" },
        { "<leader>ss",           "<cmd>Telescope live_grep<cr>",               desc = "String" },
        { "<leader>sm",           "<cmd>Telescope marks<cr>",                   desc = "Marks" },
        { "<leader>sb",           "<cmd>Telescope buffers<cr>",                 desc = "Buffers" },
        { "<leader>su",           "<cmd>Telescope undo<cr>",                    desc = "Undo" },
        { "<leader>so",           "<cmd>Telescope oldfiles<cr>",                desc = "Oldfiles" },
        { "<leader>sh",           "<cmd>Telescope help_tags<cr>",               desc = "Help" },
        { "<leader>sj",           "<cmd>Telescope jumplist<cr>",                desc = "Jumplist" },
        { "<leader>f",            group = "Files" },
        { "<leader>fo",           "<cmd>Oil<cr>",                               desc = "Oil" },
        { "<leader>fe",           "<cmd>NvimTreeFindFileToggle<cr>",            desc = "Explorer" },
        { "<leader>fd",           "<cmd>lua require('dropbar.api').pick()<cr>", desc = "Dropbap" },
        { "<leader>t",            group = "Tasks" },
        { "<leader>tt",           "<cmd>OverseerToggle<cr>",                    desc = "Toggle tasks list" },
        { "<leader>tr",           "<cmd>OverseerRun<cr>",                       desc = "Run task" },
        { "<leader>ti",           "<cmd>OverseerInfo<cr>",                      desc = "Info" },
        { "<leader>tb",           "<cmd>OverseerBuild<cr>",                     desc = "Build" },
        { "<leader>g",            group = "Git" },
        { "<leader>gg",           "<cmd>Neogit<cr>",                            desc = "Git" },
        { "<leader>gb",           "<cmd>BlameToggle<cr>",                       desc = "Blame" },
        { "<leader>gs",           "<cmd>Telescope git_status<cr>",              desc = "Status" },
        { "<leader>Quickfix list" },
        { "<leader>ct",           "<cmd>Trouble qflist toggle<cr>",             desc = "Quickfix list (Trouble)" },
        { "<leader>co",           "<cmd>copen<cr>",                             desc = "Open" },
        { "<leader>cc",           "<cmd>cclose<cr>",                            desc = "Close" },
        { "<leader>cn",           "<cmd>cnext<cr>",                             desc = "Next" },
        { "<leader>cp",           "<cmd>cprev<cr>",                             desc = "Prev" },
        { "<leader>D",            group = "Diff" },
        { "<leader>Dd",           "<cmd>DiffviewOpen<cr>",                      desc = "Diff with current Index" },
        { "<leader>Dh",           "<cmd>DiffviewFileHistory %<cr>",             desc = "Diff file history" },
        { "<leader>Dc",           "<cmd>DiffviewClose<cr>",                     desc = "Close Diffview" },
        { "<leader>l",            group = "LSP" },
        { "<leader>lI",           "<cmd>Mason<cr>",                             desc = "Install" },
        {
          "<leader>ll",
          "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
          desc = "LSP definitions / references / ... (Trouble)",
        },
        { "<leader>ld", "<cmd>lua vim.lsp.buf.definition()<cr>",                                 desc = "Definiion" },
        { "<leader>li", "<cmd>lua vim.lsp.buf.implementation()<cr>",                             desc = "Implementation" },
        { "<leader>lh", "<cmd>lua vim.lsp.buf.hover({border='rounded', title='Signature'})<cr>", desc = "Signature" },
        { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>",                                desc = "Actions" },
        { "<leader>lr", "<cmd>lua vim.lsp.buf.references()<cr>",                                 desc = "References" },
        { "<leader>lR", "<cmd>lua vim.lsp.buf.rename()<cr>",                                     desc = "Rename" },
        {
          "<leader>lf",
          "<cmd>lua require('conform').format(( async = true, lsp_fallback = true ))<cr>",
          desc = "Format",
        },
        { "<leader>d",  group = "Diagnostics" },
        { "<leader>dt", "<cmd>Trouble diagnostics toggle<cr>",              desc = "Trouble" },
        { "<leader>dT", "<cmd>Trouble diagnostics toggle filter.buf=0<cr>", desc = "Trouble (current file)" },
        { "<leader>ds", "<cmd>Trouble symbols toggle focus=false<cr>",      desc = "Symbols" },
        { "<leader>dh", "<cmd>lua vim.diagnostic.open_float()<cr>",         desc = "Open highlighted" },
        { "<leader>dn", "<cmd>lua vim.diagnostic.goto_next()<cr>",          desc = "Next" },
        { "<leader>dp", "<cmd>lua vim.diagnostic.goto_prev()<cr>",          desc = "Previous" },
        { "<leader>b",  group = "Buffers" },
        { "<leader>bz", "<cmd>ZenMode<cr>",                                 desc = "Zen" },
        { "<leader>B",  group = "Debug" },
        { "<leader>Bb", "<cmd>DapToggleBreakpoint<cr>",                     desc = "Breakpoint" },
        { "<leader>Bs", "<cmd>DapContinue<cr>",                             desc = "Start/Continue" },
        { "<leader>v",  "<cmd>e ~/.config/nvim<cr>",                        desc = "Edit config" },
      })
    end,
  },
}
